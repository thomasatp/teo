{"version":3,"sources":["images/teo.svg","images/teoBlack.svg","images/pushAxel1.jpg","images/pushAxel2.jpg","images/pushAxel3.jpg","images/pushAxel4.jpg","images/pushAxel5.jpg","images/pushAxel6.jpg","images/pushAxel7.jpg","images/pushAxel8.jpg","images/pushAxel9.jpg","Intro.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Intro","useState","displayLogo","setDisplayLogo","displayText","setDisplayText","opacityText","setOpacityText","height","setHeight","useEffect","setTimeout","style","className","src","teo","alt","Main","pushAxel1","pushAxel2","pushAxel3","pushAxel4","pushAxel5","pushAxel6","pushAxel7","pushAxel8","pushAxel9","photos","display","setDisplay","href","teoBlack","width","map","photo","index","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.20081f97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/teo.7c09ec4a.svg\";","module.exports = __webpack_public_path__ + \"static/media/teoBlack.06d80544.svg\";","module.exports = __webpack_public_path__ + \"static/media/pushAxel1.93109704.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pushAxel2.6e9f113b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pushAxel3.c8653c60.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pushAxel4.e4f77d9e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pushAxel5.492a4d76.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pushAxel6.2d2afa9a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pushAxel7.d18fa7e5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pushAxel8.56e090bd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pushAxel9.e59089ae.jpg\";","import React, { useEffect, useState } from 'react';\nimport './Intro.css';\nimport teo from './images/teo.svg'\n\nfunction Intro() {\n\n    const [displayLogo, setDisplayLogo] = useState('flex')\n    const [displayText, setDisplayText] = useState('flex')\n    const [opacityText, setOpacityText] = useState('')\n    const [height, setHeight] = useState('100vh')\n\n    useEffect(() => {\n        setTimeout(() => {  \n            setDisplayLogo('none')\n            setOpacityText('visible')\n        }, 4000);\n\n        setTimeout(() => {\n            setDisplayText('none')\n            setOpacityText('')\n            setHeight('0vh')\n        }, 6000);\n    })\n\n    return (\n        <div style={{height: `${height}`}} className={`container-fluid intro`}>\n            <img className={`logo ${displayLogo}`} src={teo} alt='logo'/>\n            <div className={`text-intro ${displayText} ${opacityText}`}>\n                <h1 className='title'>Téo Quitellic</h1>\n                <p className='subtitle'>Game developper</p>\n            </div>\n        </div>\n    )\n} \n\nexport default Intro;\n","import React, {useEffect, useState} from 'react';\nimport './Main.css';\nimport teoBlack from './images/teoBlack.svg'\nimport pushAxel1 from './images/pushAxel1.jpg'\nimport pushAxel2 from './images/pushAxel2.jpg'\nimport pushAxel3 from './images/pushAxel3.jpg'\nimport pushAxel4 from './images/pushAxel4.jpg'\nimport pushAxel5 from './images/pushAxel5.jpg'\nimport pushAxel6 from './images/pushAxel6.jpg'\nimport pushAxel7 from './images/pushAxel7.jpg'\nimport pushAxel8 from './images/pushAxel8.jpg'\nimport pushAxel9 from './images/pushAxel9.jpg'\n\nfunction Main() {\n\n    const [photos,\n        setPhotos] = useState([\n        pushAxel1,\n        pushAxel2,\n        pushAxel3,\n        pushAxel4,\n        pushAxel5,\n        pushAxel6,\n        pushAxel7,\n        pushAxel8,\n        pushAxel9\n    ])\n\n    const [display, setDisplay] = useState('none')\n\n    useEffect(() => {\n\n        setTimeout(() => {\n            setDisplay('block')\n        }, 6000);\n    })\n\n    return (\n        <div style={{display: `${display}`}}>\n            <nav className=\"navbar navbar-light bg-light\">\n            <a className=\"navbar-brand\" href=\"#\">\n                <img\n                    src={teoBlack}\n                    width=\"30\"\n                    height=\"30\"\n                    className=\"d-inline-block align-top\"\n                    alt=\"\"/>\n                <p className=\"name\">Téo Quitellic</p>\n            </a>\n        </nav>\n        <div className=\"container-fluid\">\n            <div className=\"row p-3\">\n            {photos.map((photo, index) => (\n                <div className=\"col-4 mb-5\"><img className=\"img-fluid\" src={photo}/></div>\n            ))}\n            </div>\n        </div>\n        </div>\n\n    )\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\nimport Intro from './Intro';\nimport Main from './Main';\n\nfunction App() {\n\n    return (\n        <div>\n            <Intro/>\n            <Main/>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}